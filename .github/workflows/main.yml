name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_project:
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install Node.js and npm
        run: sudo apt install -y nodejs npm
      - name: Install Dependencies
        run: npm install
      - name: Build Project
        run: npm run build --if-present

  build_image:
    runs-on: self-hosted
    needs: build_project
    steps:
      - run: docker build -t sakthisiddu1/docker-react:${{ github.run_number }} .

  push_image:
    runs-on: self-hosted
    needs: build_image
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push Image
        run: docker push sakthisiddu1/docker-react:${{ github.run_number }}

  deploy:
    runs-on: self-hosted
    needs: push_image
    steps:
      - name: Generate Deployment YAML
        run: |
          echo "
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: my-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: my-app
            template:
              metadata:
                labels:
                  app: my-app
              spec:
                containers:
                - name: my-app
                  image: sakthisiddu1/docker-react:${{ github.run_number }}
                  ports:
                  - containerPort: 80
          " > deployment.yaml
      - name: Generate Service YAML
        run: |
          echo "
          apiVersion: v1
          kind: Service
          metadata:
            name: my-app-service
          spec:
            type: NodePort
            selector:
              app: my-app
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
                nodePort: 30007
          " > service.yaml
      - name: Deploy to Kubernetes
        run: ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/test.pem ubuntu@K8S_MASTER_IP "kubectl apply -f -" < deployment.yaml && ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/test.pem ubuntu@K8S_MASTER_IP "kubectl apply -f -" < service.yaml
